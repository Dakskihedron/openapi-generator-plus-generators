package {{apiImplPackage}};

{{>frag/imports}}
{{>hooks/apiImplHeader}}
{{>generatedAnnotation}}
public class {{className name}}ApiImpl implements {{@root/apiPackage}}.{{className name}}Api {

	{{>hooks/injectApi group=. name='api'}}

	{{>hooks/apiImplClassBody}}
{{#each operations}}
	@Override
	public {{#if returnNativeType}}{{{returnNativeType}}}{{else}}void{{/if}} {{identifier name}}({{#each parameters}}{{>serviceQueryParams}}{{>servicePathParams}}{{>serviceHeaderParams}}{{>serviceFormParams}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if requestBody}}{{#if parameters}}, {{/if}}{{>serviceBodyParam}}{{/if}}){{#each (nonDefaultResponses)}}{{#if @first}} throws{{else}},{{/if}} {{{className ../name}}}{{{code}}}Exception{{/each}} {
		try {
			{{#if returnNativeType}}return {{/if}}api.{{identifier name}}({{#each parameters}}{{#if (isFile)}}{{identifier name}}InputStream, {{identifier name}}Detail{{else}}{{identifier name}}{{/if}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if requestBody}}{{#if parameters}}, {{/if}}{{identifier requestBody.name}}{{/if}});
		} catch (javax.ws.rs.WebApplicationException __e) {
			{{#each (nonDefaultResponses)}}
			if (__e.getResponse().getStatus() == {{code}}) {
				try {
					throw new {{className ../name}}{{code}}Exception({{#if defaultContent.nativeType}}__e.getResponse().readEntity({{defaultContent.nativeType}}.class){{/if}});
				} catch (javax.ws.rs.ProcessingException __processingException) {
					throw new {{{className ../name}}}UnexpectedResponseException(__e.getResponse(), __processingException);
				}
			}
			{{/each}}
			throw new {{{className name}}}UnexpectedResponseException(__e.getResponse());
		} catch (javax.ws.rs.client.ResponseProcessingException __e) {
			throw new {{{className name}}}UnexpectedResponseException(__e.getResponse(), __e);
		}
	}
	
{{/each}}
}
