{{>header}}

/// <reference path="./custom.d.ts" />

import portableFetch from "portable-fetch";
import { Configuration } from "./configuration";
import { BASE_PATH, COLLECTION_FORMATS, FetchAPI, FetchArgs, BaseAPI, RequiredError } from "./runtime";
import { Api } from "./models";
{{#ifeq dateApproach 'blind-date'}}
import { LocalDateString, LocalTimeString, LocalDateTimeString, OffsetDateTimeString } from 'blind-date';
{{/ifeq}}
{{>hooks/apiImports}}

export type FactoryFunction<T> = (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) => T;

{{#each groups}}
/**
 * {{className name}}Api - fetch parameter creator
 {{#if description}}
 * {{{md description}}}
 {{/if}}
 * @export
 */
export const {{className name}}ApiFetchParamCreator = function (configuration?: Configuration) {
	return {
	{{#each operations}}
		/**
		 {{#if description}}
		 * {{{md description}}}
		 {{/if}}
		 {{#if summary}}
		 * @summary {{{summary}}}
		 {{/if}}
		 {{#each parameters}}
		 * {{>frag/parameterDocumentation}}
		 {{/each}}
		 {{#with requestBody}}
		 * {{>frag/parameterDocumentation}}
		 {{/with}}
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		{{identifier name}}({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}options: RequestInit = {}): FetchArgs {
	{{#each parameters}}
	{{>frag/validateParameter operation=..}}
	{{/each}}
	{{#with requestBody}}
	{{>frag/validateParameter operation=..}}
	{{/with}}
			let localVarPath = `{{{../path}}}{{{path}}}`{{#each pathParams}}
				.replace('{{safe '{'}}{{{name}}}{{safe '}'}}', encodeURIComponent(String({{identifier name}}))){{/each}};
			const localVarPathQueryStart = localVarPath.indexOf("?");
			const localVarRequestOptions: RequestInit = Object.assign({ method: '{{httpMethod}}' }, options);
			const localVarHeaderParameter: HeadersInit = {};
			const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
			if (localVarPathQueryStart !== -1) {
				localVarPath = localVarPath.substring(0, localVarPathQueryStart);
			}
	{{#if formParams}}
			const localVarFormParams = new URLSearchParams();
	{{/if}}

	{{#if securityRequirements}}
		{{#each securityRequirements.requirements}}
			{{#each schemes}}
			// authentication {{scheme.name}} required
			{{#if scheme.isApiKey}}
			{{#if scheme.isInHeader}}
			if (configuration && configuration.apiKey) {
				const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{identifier scheme.name}}")
					: configuration.apiKey;
				if (localVarApiKeyValue !== null) {
					localVarHeaderParameter["{{identifier scheme.name}}"] = localVarApiKeyValue;
				}
			}
			{{/if}}
			{{#if scheme.isInQuery}}
			if (configuration && configuration.apiKey) {
				const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{identifier scheme.name}}")
					: configuration.apiKey;
				if (localVarApiKeyValue !== null) {
					localVarQueryParameter.set("{{identifier scheme.name}}", localVarApiKeyValue);
				}
			}
			{{/if}}
			{{/if}}
			{{#if scheme.isBasic}}
			// http basic authentication required
			if (configuration && (configuration.username || configuration.password)) {
				localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
			}
			{{/if}}
			{{#or scheme.isOAuth scheme.isOpenIdConnect}}
			// oauth or openIdConnect required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization("{{scheme.name}}", [{{#each scopes}}"{{{name}}}"{{#unless @last}}, {{/unless}}{{/each}}])
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter["Authorization"] = "Bearer " + localVarAuthorizationValue;
				}
			}
			{{/or}}
			{{#if scheme.isHttp}}
			// http authorization required
			if (configuration && configuration.authorization) {
				const localVarAuthorizationValue = typeof configuration.authorization === 'function'
					? configuration.authorization("{{scheme.name}}")
					: configuration.authorization;
				if (localVarAuthorizationValue !== null) {
					localVarHeaderParameter["Authorization"] = "{{capitalize scheme.scheme}} " + localVarAuthorizationValue;
				}
			}
			{{/if}}
			{{/each}}
		{{/each}}
	{{/if}}
	{{#each queryParams}}
		{{!-- TODO --}}
		{{!--
			{{#if isListContainer}}
			if ({{identifier name}}) {
			{{#if isCollectionFormatMulti}}
				localVarQueryParameter.append('{{name}}', String({{identifier name}}));
			{{else}}
				localVarQueryParameter.append('{{name}}', {{identifier name}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
			{{/if}}
			}
			{{else}}
		--}}
			if ({{identifier name}} !== undefined) {
{{#if (isDateTime)}}
	{{#ifeq dateApproach 'native'}}
				localVarQueryParameter.append('{{name}}', {{identifier name}}.toISOString());
	{{else}}
				localVarQueryParameter.append('{{name}}', String({{identifier name}}));
	{{/ifeq}}
{{else if (isDate)}}
				localVarQueryParameter.append('{{name}}', String({{identifier name}}));
{{else if (isArray)}}
				if ({{identifier name}}.length > 0) {
					localVarQueryParameter.append('{{name}}', {{identifier name}}.join(','));
				}
{{else}}
				localVarQueryParameter.append('{{name}}', String({{identifier name}}));
{{/if}}
			}
		{{!--
			{{/if}}
		--}}

	{{/each}}
	{{#each headerParams}}
			{{#ifdef isListContainer}}
			if ({{identifier name}}) {
				localVarHeaderParameter['{{name}}'] = {{identifier name}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
			}
			{{else}}
			if ({{identifier name}} !== undefined && {{identifier name}} !== null) {
				localVarHeaderParameter['{{name}}'] = String({{identifier name}});
			}
			{{/ifdef}}

	{{/each}}
	{{#each formParams}}
			{{#ifdef isListContainer}}
			if ({{identifier name}}) {
			{{#ifdef isCollectionFormatMulti}}
				{{identifier name}}.forEach((element) => {
					localVarFormParams.append('{{name}}', element as any);
				})
			{{else}}
					localVarFormParams.set('{{name}}', {{identifier name}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
			{{/ifdef}}
			}
			{{else}}
			if ({{identifier name}} !== undefined) {
				localVarFormParams.set('{{name}}', {{identifier name}} as any);
			}
			{{/ifdef}}

	{{/each}}
	{{#if formParams}}
			localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

	{{/if}}
	{{#with requestBody}}
			{{#unless consumes}}
			localVarHeaderParameter['Content-Type'] = 'application/json';
			{{/unless}}
			{{#each consumes}}
			{{#if @first}}
			localVarHeaderParameter['Content-Type'] = '{{{mediaType}}}';
			{{/if}}
			{{/each}}

	{{/with}}
			localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
	{{#if formParams}}
			localVarRequestOptions.body = localVarFormParams.toString();
	{{/if}}
	{{#with requestBody}}
	
			if ({{identifier name}} !== undefined) {
		{{#with defaultContent}}
			{{#ifeq mediaType.mimeType 'application/x-www-form-urlencoded'}}
				const localVarFormParams = new URLSearchParams();
				for (const localVarName in {{identifier ../name}}) {
					if (localVarName !== undefined) {
						localVarFormParams.set(localVarName, ({{identifier ../name}} as any)[localVarName]);
					}
				}
				localVarRequestOptions.body = localVarFormParams;
			{{else ifeq mediaType.mimeType 'application/json'}}
				localVarRequestOptions.body =  JSON.stringify({{identifier ../name}} || {});
			{{else ifeq mediaType.mimeType 'text/json'}}
				localVarRequestOptions.body =  JSON.stringify({{identifier ../name}} || {});
			{{else ifeq mediaType.mimeType 'multipart/form-data'}}
				const localVarFormData = new FormData();
			{{#each encoding.properties}}
				if ({{identifier ../../name}}.{{identifier property.name}} !== undefined) {
{{#if (isArray property)}}
					for (const __anObject of {{identifier ../../name}}.{{identifier property.name}}{{#if property.nullable}} || []{{/if}}) {
						{{>frag/multipartProperty . propertyVar='__anObject' bodyPartsVar='localVarFormData'}}
					}
{{else}}
					{{>frag/multipartProperty . propertyVar=(concat (identifier ../../name) '.' (identifier property.name)) bodyPartsVar='localVarFormData'}}
{{/if}}
				}
			{{/each}}
				localVarRequestOptions.body = localVarFormData;
			{{else}}
				localVarRequestOptions.body = String({{identifier ../name}} || "");
{{/ifeq}}
			}
		{{/with}}
	{{/with}}

			const localVarQueryParameterString = localVarQueryParameter.toString();
			if (localVarQueryParameterString) {
				localVarPath += "?" + localVarQueryParameterString;
			}
			return {
				url: localVarPath,
				options: localVarRequestOptions,
			};
		},
	{{/each}}
	}
};

/**
 * {{className name}}Api - functional programming interface
 {{#if description}}
 * {{{md description}}}
 {{/if}}
 * @export
 */
export const {{className name}}ApiFp = function(configuration?: Configuration) {
	return {
	{{#each operations}}
		/**
		 {{#if description}}
		 * {{{md description}}}
		 {{/if}}
		 {{#if summary}}
		 * @summary {{{summary}}}
		 {{/if}}
		 {{#each parameters}}
		 * {{>frag/parameterDocumentation}}
		 {{/each}}
		 {{#with requestBody}}
		 * {{>frag/parameterDocumentation}}
		 {{/with}}
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		{{identifier name}}({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<{{#if returnNativeType.serializedType}}{{{returnNativeType}}}{{else}}Response{{/if}}> {
			const localVarFetchArgs = {{className ../name}}ApiFetchParamCreator(configuration).{{identifier name}}({{#each parameters}}{{identifier name}}, {{/each}}{{#with requestBody}}{{identifier name}}, {{/with}}options);
			return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
				return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
					if (response.status >= 200 && response.status < 300) {
						return response{{#if returnNativeType.serializedType}}.json(){{/if}};
					} else {
						throw response;
					}
				});
			};
		},
	{{/each}}
	}
};

/**
 * {{className name}}Api - factory interface
 {{#if description}}
 * {{{md description}}}
 {{/if}}
 * @export
 */
export const {{className name}}ApiFactory: FactoryFunction<{{className name}}Api{{#if @root.withInterfaces}}Interface{{/if}}> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {
	return new {{className name}}Api(configuration, basePath, fetch);
};

{{#if @root.withInterfaces}}
/**
 * {{className name}}Api - interface
 {{#if description}}
 * {{{md description}}}
 {{/if}}
 * @export
 * @interface {{className name}}Api
 */
export interface {{className name}}ApiInterface {
{{#each operations}}
	/**
	 {{#if description}}
	 * {{{md description}}}
	 {{/if}}
	 {{#summary}}
	 * @summary {{{summary}}}
	 {{/summary}}
	 {{#each parameters}}
	 * @param {{safe '{'}}{{{nativeType}}}{{safe '}'}} {{#unless required}}[{{/unless}}{{identifier name}}{{#unless required}}]{{/unless}} {{#if description}}{{description}}{{/if}}
	 {{/each}}
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof {{className ../name}}ApiInterface
	 */
	{{identifier name}}({{#each parameters}}{{identifier name}}: {{{nativeType}}}{{#unless required}} | undefined{{/unless}}, {{/each}}options?: RequestInit): Promise<{{#if returnNativeType}}{{{returnNativeType}}}{{else}}{}{{/if}}>;

{{/each}}
}

{{/if}}
/**
 * {{className name}}Api - object-oriented interface
 {{#if description}}
 * {{{md description}}}
 {{/if}}
 * @export
 * @class {{className name}}Api
 * @extends {BaseAPI}
 */
{{#if @root.withInterfaces}}
export class {{className name}}Api extends BaseAPI implements {{className name}}ApiInterface {
{{else}}
export class {{className name}}Api extends BaseAPI {
{{/if}}
	{{#each operations}}
	/**
	 {{#if description}}
	 * {{{md description}}}
	 {{/if}}
	 {{#if summary}}
	 * @summary {{{summary}}}
	 {{/if}}
	 {{#each parameters}}
	 * {{>frag/parameterDocumentation}}
	 {{/each}}
	 {{#with requestBody}}
	 * {{>frag/parameterDocumentation}}
	 {{/with}}
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof {{className ../name}}Api
	 */
	public {{identifier name}}({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}options?: RequestInit) {
		return {{className ../name}}ApiFp(this.configuration).{{identifier name}}({{#each parameters}}{{identifier name}}, {{/each}}{{#with requestBody}}{{identifier name}}, {{/with}}options)(this.fetch, this.basePath);
	}

	{{/each}}
}
{{/each}}
