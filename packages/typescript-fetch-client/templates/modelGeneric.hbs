{{#ifvex 'convert-to-literal-type'}}
export type {{className name}} = {{{vendorExtensions.convert-to-literal-type}}}
{{else}}
/**
{{#if description}}
 * {{{md description}}}
{{/if}}
 * @export
 * @interface {{className name}}
 */
export interface {{className name}} {{#if parentNativeType}}extends {{{parentNativeType}}} {{/if}}{{!--
--}}{{#if implements}}{{#unless parentNativeType}}extends{{else}},{{/unless}} {{#each implements}}{{{nativeType}}}{{#hasMore}},{{/hasMore}} {{/each}}{{/if}}{
{{#if discriminator}}
{{#with discriminator}}
	{{name}}: {{{nativeType.serializedType}}};
	
{{/with}}
{{/if}}
{{#each discriminatorValues}}
	{{model.discriminator.name}}: {{{value}}}

{{/each}}
{{#if component}}
	[key: string]: {{{component.nativeType}}}

{{/if}}
{{#each properties}}
	/**
	{{#if description}}
	 * {{{md description}}}
	{{/if}}
	 * @type {{safe '{'}}{{{nativeType.serializedType}}}{{safe '}'}}
	 * @memberof {{className ../name}}
	 */
	{{name}}{{#unless required}}?{{/unless}}: {{{nativeType.serializedType}}};
{{/each}}
}
{{/ifvex}}
{{#if schemas}}

/**
 * @export
 * @namespace {{className name}}
 */
export namespace {{className name}} {
{{#each schemas}}
	{{#if (isEnum)}}
	{{>modelEnum}}
	{{else}}
	{{>modelGeneric}}
	{{/if}}
{{/each}}
}
{{/if}}
