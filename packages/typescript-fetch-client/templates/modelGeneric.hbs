{{#ifvex convert-to-literal-type}}
export type {{className name}} = {{{vendorExtensions.convert-to-literal-type}}}
{{else}}
/**
{{#if description}}
 * {{{description}}}
{{/if}}
 * @export
 * @interface {{className name}}
 */
export interface {{className name}} {{#if parentNativeType}}extends {{{parentNativeType}}} {{/if}}{{!--
--}}{{#if implements}}{{#unless parentNativeType}}extends{{else}},{{/unless}} {{#each implements}}{{{nativeType}}}{{#hasMore}},{{/hasMore}} {{/each}}{{/if}}{
{{#if discriminator}}
{{#with discriminator}}
	{{name}}: {{{nativeType.serializedType}}};
	
{{/with}}
{{/if}}
{{#each discriminatorValues}}
	{{model.discriminator.name}}: {{{value}}}

{{/each}}
{{!-- TODO --}}
{{!--#if additionalPropertiesType}}
{{#with additionalPropertiesType}}
	[key: string]: {{{additionalPropertiesType}}}{{#if properties}} | any{{/if}};

{{/with}}
{{/if--}}
{{#each properties}}
	/**
	{{#if description}}
	 * {{{description}}}
	{{/if}}
	 * @type {{safe '{'}}{{{nativeType}}}{{safe '}'}}
	 * @memberof {{className ../name}}
	 */
	{{name}}{{#unless required}}?{{/unless}}: {{{nativeType.serializedType}}}{{#if nullable}} | null{{/if}};
{{/each}}
}
{{/ifvex}}
{{#if models}}

/**
 * @export
 * @namespace {{className name}}
 */
export namespace {{className name}} {
{{#each models}}
	{{#if (isEnum)}}
	{{>modelEnum}}
	{{else}}
	{{>modelGeneric}}
	{{/if}}
{{/each}}
}
{{/if}}
