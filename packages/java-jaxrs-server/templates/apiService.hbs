package {{apiServicePackage}};

{{>frag/imports}}
{{>generatedAnnotation}}
public interface {{className name}}ApiService {
	{{#each operations}}
	{{>frag/operationDocumentation}}
	{{#if returnNativeType}}{{{returnNativeType}}}{{else}}void{{/if}} {{identifier name}}({{#each parameters}}{{{nativeType}}} {{identifier name}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if requestBody.nativeType}}{{#if parameters}}, {{/if}}{{{requestBody.nativeType}}} {{identifier requestBody.name}}{{/if}}{{#unless returnNativeType}}{{#or parameters requestBody.nativeType}}, {{/or}}{{javax}}.ws.rs.core.Response.ResponseBuilder response{{/unless}}){{#each (nonDefaultResponses)}}{{#if @first}} throws{{else}},{{/if}} {{{className (concat ../name '_' code)}}}Exception{{/each}};
	{{/each}}
	
	{{#each operations}}
	{{#each (nonDefaultResponses)}}
	class {{{className (concat ../name '_' code)}}}Exception extends Exception {

		private static final long serialVersionUID = 1L;

{{#set '_parameters'}}
{{/set}}
		{{#if isCatchAll}}
		private int responseCode;
{{#set '_parameters'}}
{{_parameters}}
int responseCode
{{/set}}

		{{/if}}
		{{#if defaultContent.nativeType}}
		private {{{defaultContent.nativeType}}} entity;
{{#set '_parameters'}}
{{_parameters}}
{{{defaultContent.nativeType}}} entity
{{/set}}

		{{/if}}
{{#join '_parameters' ', '}}
{{_parameters}}
{{/join}}
		public {{{className (concat ../name '_' code)}}}Exception({{{_parameters}}}) {
			{{#if isCatchAll}}
			this.responseCode = responseCode;
			{{/if}}
			{{#if defaultContent.nativeType}}
			this.entity = entity;
			{{/if}}
		}

		{{#if isCatchAll}}
		public int getResponseCode() {
			return this.responseCode;
		}

		{{/if}}
		{{#if defaultContent.nativeType}}
		public {{{defaultContent.nativeType}}} getEntity() {
			return this.entity;
		}

		{{/if}}

		{{>hooks/apiServiceException operation=..}}
	}

	{{/each}}
	{{/each}}
}
