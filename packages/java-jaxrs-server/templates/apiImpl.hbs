package {{apiImplPackage}};

{{>frag/imports}}
{{>generatedAnnotation}}
{{>hooks/apiImplClassAnnotations}}
public class {{className name}}ApiImpl implements {{apiPackage}}.{{className name}}Api {

	{{>util/inject interface=(concat apiServicePackage '.' (className name) 'ApiService') class=(concat apiServiceImplPackage '.' (className name) 'ApiServiceImpl') name='delegate'}}

	{{#if @root.useBeanValidation}}
	private {{javax}}.validation.ValidatorFactory validatorFactory = {{javax}}.validation.Validation.buildDefaultValidatorFactory();

	{{/if}}
{{#each operations}}
{{>frag/operationVars op=. jaxrs=false}}
{{#join '_arguments' ', '}}
{{{_arguments}}}
{{#unless defaultResponse.defaultContent.nativeType}}
__response
{{/unless}}
{{/join}}
	public {{javax}}.ws.rs.core.Response {{name}}({{{_parameters}}}) {
		{{#with defaultResponse}}
		final {{javax}}.ws.rs.core.Response.ResponseBuilder __response = {{javax}}.ws.rs.core.Response.status({{code}}).cacheControl({{javax}}.ws.rs.ext.RuntimeDelegate.getInstance().createHeaderDelegate({{javax}}.ws.rs.core.CacheControl.class).fromString("{{#ifvex 'x-cache-control'}}{{{vendorExtensions.x-cache-control}}}{{else}}no-cache, no-store, must-revalidate, private{{/ifvex}}"));
		{{/with}}
		try {
			{{#if @root.useBeanValidation}}
			{{>frag/beanValidationValidateParams}}
			{{/if}}
			{{#with defaultResponse}}
			{{#if defaultContent.nativeType}}{{{defaultContent.nativeType}}} __entity = {{/if}}this.delegate.{{identifier ../name}}({{{../_arguments}}});
			{{#if defaultContent.nativeType}}
			{{#if @root.useBeanValidation}}
			{{>frag/beanValidationValidateResponse responseVar='__entity'}}
			{{/if}}
			__response.entity(__entity);
			{{/if}}
			return __response.build();
			{{/with}}
		{{#each responses}}
		{{#unless isDefault}}
		} catch ({{@root.apiServicePackage}}.{{{className @root/name}}}ApiService.{{{className (concat ../name '_' code)}}}Exception __e) {
			{{#unless isCatchAll}}
			__response.status({{code}});
			{{else}}
			__response.status(__e.getResponseCode());
			{{/unless}}
			{{#if defaultContent.nativeType}}
			{{#if @root.useBeanValidation}}
			{{>frag/beanValidationValidateResponse responseVar='__e.getEntity()'}}
			{{/if}}
			__response.entity(__e.getEntity());
			{{/if}}
			return __response.build();
		{{/unless}}
		{{/each}}
		} finally {
		
		}
	}

{{/each}}
}
