package {{apiPackage}};

{{>frag/imports}}
@io.swagger.annotations.Api(description = "the {{{capitalCase name}}} API")
{{#if consumes}}
@javax.ws.rs.Consumes({ {{#each consumes}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/each}} })
{{/if}}
{{#if produces}}
@javax.ws.rs.Produces({ {{#each produces}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/each}} })
{{/if}}
{{>generatedAnnotation}}
public interface {{className name}}Api {

{{#each operations}}
	@javax.ws.rs.{{httpMethod}}
	{{>hooks/apiMethodAnnotations}}
	{{#if securityRequirements}}
	{{#if @root.authenticatedOperationAnnotation}}
	{{@root.authenticatedOperationAnnotation}}
	{{/if}}
	{{/if}}
	{{#if deprecated}}
	@java.lang.Deprecated
	{{/if}}
	{{#if path}}
	@javax.ws.rs.Path("{{{path}}}")
	{{/if}}
	{{#if consumes}}
	@javax.ws.rs.Consumes({ {{#each consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/each}} })
	{{/if}}
	{{#if produces}}
	@javax.ws.rs.Produces({ {{#each produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/each}} })
	{{/if}}
	@io.swagger.annotations.ApiOperation(value = {{#if summary}}{{{stringLiteral summary}}}{{else}}""{{/if}}{{#if description}}, notes = {{{stringLiteral description}}}{{/if}}{{#if returnNativeType}}, response = {{{returnNativeType.literalType}}}.class{{/if}}{{!--{{#if returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/if}}--}}{{#if securityRequirements}}, authorizations = {
		{{#each securityRequirements}}
		@io.swagger.annotations.Authorization(value = "{{scheme.name}}"{{#if scheme.isOAuth}}, scopes = {
			{{#each scopes}}
			@io.swagger.annotations.AuthorizationScope(scope = "{{name}}", description = {{#if description}}{{{stringLiteral description}}}{{else}}""{{/if}}){{#hasMore}},{{/hasMore}}
			{{/each}}
		}{{/if}}){{#hasMore}},{{/hasMore}}
		{{/each}}
	}{{/if}}, tags={ {{#each tags}}"{{{.}}}"{{#hasMore}}, {{/hasMore}}{{/each}} })
	@io.swagger.annotations.ApiResponses(value = {
		{{#each responses}}
		@io.swagger.annotations.ApiResponse(code = {{{code}}}, message = {{{stringLiteral description}}}, response = {{#if defaultContent.nativeType}}{{{defaultContent.nativeType.literalType}}}{{else}}Void{{/if}}.class{{!--{{#if containerType}}, responseContainer = "{{{containerType}}}"{{/if}}--}}){{#hasMore}},{{/hasMore}}
		{{/each}}
	})
	javax.ws.rs.core.Response {{identifier name}}({{#each parameters}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>formParams}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if requestBody}}{{#if parameters}}, {{/if}}{{>bodyParam}}{{/if}});

{{/each}}
}
