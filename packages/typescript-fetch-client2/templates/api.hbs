{{>header}}

import { Configuration, getDefaultConfiguration } from "../configuration";
import { COLLECTION_FORMATS, encodeURIPathSegment, FetchArgs, RequiredError, dateToString } from "../runtime";
import { Api, UndocumentedReponse, FetchErrorResponse } from "../models";
{{#ifeq dateApproach 'blind-date'}}
import { LocalDateString, LocalTimeString, LocalDateTimeString, OffsetDateTimeString } from 'blind-date';
{{/ifeq}}
{{>hooks/apiImports}}

namespace {{className name}}Api {
{{#each operations}}
{{#if (gt (count parameters) 1)}}
	{{>frag/apiParametersInterface}}
	{{#set 'parametersInterfaceName'}}
	{{{className (concat name '_' 'parameters')}}}
	{{/set}}
{{/if}}
	{{>frag/apiResponseTypes}}
{{/each}}
}

{{#each operations}}
{{>frag/operationDocumentation}}
{{#if (gt (count parameters) 1)}}
{{#set '_parameterPrefix'}}
__params.
{{/set}}
export function {{identifier name}}ParamCreator(__params: {{className ../name}}Api.{{{parametersInterfaceName}}}, {{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options: RequestInit = {}, configuration?: Configuration): FetchArgs {
{{else}}
{{#set '_parameterPrefix'}}
{{/set}}
export function {{identifier name}}ParamCreator({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options: RequestInit = {}, configuration?: Configuration): FetchArgs {
{{/if}}
	configuration ??= getDefaultConfiguration();

	{{#each parameters}}
	{{>frag/validateParameter operation=.. parameterPrefix=../_parameterPrefix}}
	{{/each}}
	{{#with requestBody}}
	{{>frag/validateParameter operation=.. parameterPrefix=''}}
	{{/with}}

	let localVarPath = `{{{../path}}}{{{path}}}`{{#each pathParams}}
		.replace('{{safe '{'}}{{{serializedName}}}{{safe '}'}}', encodeURIPathSegment(String({{../_parameterPrefix}}{{identifier name}}))){{/each}};
	const localVarPathQueryStart = localVarPath.indexOf("?");
	const localVarRequestOptions: RequestInit = Object.assign({ method: '{{httpMethod}}' }, options);
	const localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();
	const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
	if (localVarPathQueryStart !== -1) {
		localVarPath = localVarPath.substring(0, localVarPathQueryStart);
	}
{{#if formParams}}
	const localVarFormParams = new URLSearchParams();
{{/if}}
{{#if cookieParams}}
	const localVarCookieParams = new URLSearchParams();
{{/if}}

	{{>frag/apiSecurityRequirements}}
{{#each queryParams}}
	{{>frag/requestParameter dest='localVarQueryParameter' var=(concat ../_parameterPrefix (identifier name)) encoding=encoding}}

{{/each}}
{{#each headerParams}}
	{{>frag/requestParameter dest='localVarHeaderParameter' var=(concat ../_parameterPrefix (identifier name)) encoding=encoding}}

{{/each}}
{{#if formParams}}
{{#each formParams}}
	{{>frag/requestParameter dest='localVarFormParams' var=(concat ../_parameterPrefix (identifier name)) encoding=encoding}}

{{/each}}
	localVarHeaderParameter.set('Content-Type', 'application/x-www-form-urlencoded');

{{/if}}
{{#if cookieParams}}
{{#each cookieParams}}
	{{>frag/requestParameter dest='localVarCookieParams' var=(concat ../_parameterPrefix (identifier name)) encoding=encoding}}

{{/each}}
	/* NB: setting Cookies does not work in a browser, see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name */
	localVarHeaderParameter.set("Cookie", localVarCookieParams.toString().replace(/&/g, "; "));

{{/if}}
{{#with requestBody}}
	{{#unless consumes}}
	localVarHeaderParameter.set('Content-Type', 'application/json');
	{{/unless}}
	{{#each consumes}}
	{{#if @first}}
	localVarHeaderParameter.set('Content-Type', '{{{mediaType}}}');
	{{/if}}
	{{/each}}

{{/with}}
	localVarRequestOptions.headers = localVarHeaderParameter;
{{#if formParams}}
	localVarRequestOptions.body = localVarFormParams.toString();
{{/if}}
{{#if requestBody.nativeType}}
{{#with requestBody}}

	if ({{identifier name}} !== undefined) {
{{#with defaultContent}}
	{{#if (isContentFormUrlEncoded .)}}
		const localVarFormParams = new URLSearchParams();
		{{#each (allProperties schema)}}
		{{>frag/requestParameter dest='localVarFormParams' var=(concat (identifier ../../name) '["' serializedName '"]') encoding=(lookup ../encoding.properties name)}}
		{{/each}}
		localVarRequestOptions.body = localVarFormParams;
	{{else if (isContentJson .)}}
		localVarRequestOptions.body = JSON.stringify({{identifier ../name}} || {});
	{{else if (isContentMultipart .)}}
		const localVarFormData = new FormData();
	{{#each encoding.properties}}
		if ({{identifier ../../name}}.{{identifier property.name}} !== undefined) {
{{#if (isArray property)}}
			for (const __anObject of {{identifier ../../name}}.{{identifier property.name}}{{#if property.nullable}} || []{{/if}}) {
				{{>frag/multipartProperty . propertyVar='__anObject' bodyPartsVar='localVarFormData'}}
			}
{{else}}
				{{>frag/multipartProperty . propertyVar=(concat (identifier ../../name) '.' (identifier property.name)) bodyPartsVar='localVarFormData'}}
{{/if}}
			}
		{{/each}}
			localVarRequestOptions.body = localVarFormData;
		{{else}}
			localVarRequestOptions.body = {{identifier ../name}};
{{/if}}
		}
	{{/with}}
{{/with}}
{{/if}}

	const localVarQueryParameterString = localVarQueryParameter.toString();
	if (localVarQueryParameterString) {
		localVarPath += "?" + localVarQueryParameterString;
	}
	return {
		url: localVarPath,
		options: localVarRequestOptions,
	};
}
{{/each}}

/**
 * {{className name}}Api - parameter creator
 * @export
 */
export function paramCreator(configuration?: Configuration) {
	configuration ??= getDefaultConfiguration();

	return {
	
	}
};

{{#each operations}}
{{>frag/operationDocumentation}}
{{#if (gt (count parameters) 1)}}
export async function {{identifier name}}(__params: {{className ../name}}Api.{{{parametersInterfaceName}}}, {{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options?: RequestInit, configuration?: Configuration): Promise<{{{className ../name}}}Api.{{{className name}}}Response> {
	try {
		configuration ??= getDefaultConfiguration(); 
		const localVarFetchArgs = {{identifier name}}ParamCreator(__params, {{#if requestBody.nativeType}}{{#with requestBody}}{{identifier name}}, {{/with}}{{/if}}options, configuration);
{{else}}
export async function {{identifier name}}({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options?: RequestInit, configuration?: Configuration): Promise<{{{className ../name}}}Api.{{{className name}}}Response> {
	try {
		configuration ??= getDefaultConfiguration(); 
		const localVarFetchArgs = {{identifier name}}ParamCreator({{#each parameters}}{{identifier name}}, {{/each}}{{#if requestBody.nativeType}}{{#with requestBody}}{{identifier name}}, {{/with}}{{/if}}options, configuration);
{{/if}}
		const response = await configuration.fetch(configuration.baseUri + localVarFetchArgs.url, localVarFetchArgs.options)
		const contentType = response.headers.get('Content-Type');
		const mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;
		
		{{#each responses}}
		{{#unless isCatchAll}}
		if (response.status === {{code}}) {
			{{#if contents}}
			{{#each contents}} 
			if (mimeType === {{{stringLiteral mediaType.mimeType}}}) {
				{{>frag/apiResponseContent group=../../.. operation=../.. response=..}}
			}
			{{/each}}
			{{else}}
			{{>frag/apiResponseContent group=../.. operation=.. response=.}}
			{{/if}}
		}
		{{/unless}}
		{{/each}}
		{{#if catchAllResponse}}
		/* Catch-all response */
		{{#with catchAllResponse}}
		{{#if contents}}
		{{#each contents}} 
		if (mimeType === {{{stringLiteral mediaType.mimeType}}}) {
			{{>frag/apiResponseContent group=../../.. operation=../.. response=..}}
		}
		{{/each}}
		{{else}}
		{{>frag/apiResponseContent group=../.. operation=.. response=.}}
		{{/if}}
		{{/with}}
		{{else}}

		return {
			status: 'undocumented',
			contentType: mimeType,
			response,
		}
		{{/if}}
	} catch (error) {
		return {
			status: 'error',
			error,
		}
	}
}
{{/each}}

/**
 * Creates a version of the API where the specified configuration is the default for all operations.
 * @export
 */
export function withConfiguration(defaultConfiguration: Configuration) {
	return {
	{{#each operations}}
		{{>frag/operationDocumentation}}
		{{#if (gt (count parameters) 1)}}
		{{identifier name}}: (__params: {{className ../name}}Api.{{{parametersInterfaceName}}}, {{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options?: RequestInit, configuration?: Configuration) => {{identifier name}}(__params, {{#if requestBody.nativeType}}{{#with requestBody}}{{identifier name}}, {{/with}}{{/if}}options, configuration ?? defaultConfiguration),
		{{else}}
		{{identifier name}}: ({{#each parameters}}{{>frag/parameter}}, {{/each}}{{#if requestBody.nativeType}}{{#with requestBody}}{{>frag/parameter}}, {{/with}}{{/if}}options?: RequestInit, configuration?: Configuration) => {{identifier name}}({{#each parameters}}{{identifier name}}, {{/each}}{{#if requestBody.nativeType}}{{#with requestBody}}{{identifier name}}, {{/with}}{{/if}}options, configuration ?? defaultConfiguration),
		{{/if}}
	{{/each}}
	}
};

/** 
 * Access all the endpoints in this group. Note that this will cause every endpoint to be included 
 * in the resulting JavaScript bundle. To allow tree-shaking to remove unused endpoints, import the
 * specific endpoints from this file directly.
 */
const {{className name}}Api = { 
	{{#each operations}}{{identifier name}}, {{/each}}
};

export default {{className name}}Api;
